==========================================================================

       File Name: readme.txt

       Description: CppUTest Sampleビルド環境について

       Notes: (C) Copyright 2015 Sony Corporation

       Author: Tetsuya Sakai


==========================================================================

１、概要
　本環境は、CppUTestを使用したテストを行うためのSampleです。
　本ドキュメントは動作環境や使い方の説明を目的としており、「CppUTestとは何か？」
　については触れません。


２、動作環境と使用Version
　以下の環境でのみ動作確認済みです。
　　プラットフォーム：cygwin（標準cygwin）
　　                  CygwinのSetupで、Devel - autoconfを追加すること
　　コンパイラ      ：GCC 3.4.4
　　CppUTest        ：3.6


３、ディレクトリ構成
　開発対象によって若干の違いはありますが、基本的には下記構成をとっています。
　★印の付いているディレクトリは、詳細を後述します。
　　 Sample/test           … テストコード
           /src            … スタブ・ダミーコード等
           /include        … テストヘッダ
           /doc            … Sampleドキュメント
           /build          … ビルド及びプログラム実行 ★
           /config         … コンフィグレーションファイル群 ★


４、configディレクトリ
　ファイルと用途は以下の通りです。

　　config.mk       … コンフィグレーション情報を記述するファイル。
                       複数のMakefileで共通に使用するmake変数の定義、
                       ユーザマクロの定義（-Dでの定義）を目的としたファイル。
                       このファイルに変更を加えると、全てのソースにリコンパイルがかかる。
                       複数のMakefileで共通に使用するmake変数の定義は、ここに記述すること。

　　paths.mk        … パス情報を記述したファイル。
                       複数のMakefileで共通に使用するパス情報の定義を目的としたファイル。
                       必要に応じて追記して良い。

　　rules.mk        … ルールを記述したファイル。
                       テスト環境独自のルールを記述する事を目的としたファイル。
                       Terroirには拡張子cppのファイルをコンパイルするルールが無いので追加してある。
                       必要に応じて追記して良い。

　　base_config.mk  … Terroirのconfigファイル名を記述したファイル。
                       Smapleををcopyして使う場合、ディレクトリ階層が変わってしまう事がある。
                       その場合、本ファイルのROOT_DIR変数を変更することで対応できる。


５、buildディレクトリ
　実行ファイル生成用のMakefileと、テスト実行用のMakefileが存在します。
　実行ファイルやテスト結果も、この場所に生成されます。

　　Makefile        … テスト実行用のMakefile。
                       実行ファイルが存在しない場合は、生成した上でテストを実行する。

　　Makefile.build  … 実行ファイル生成用のMakefile。
                       ビルド関連の変更はこれに対して行うこと。

　　Makefile.lib    … ユーザコードアーカイブ化用のMakefile。
                       ユーザコードが存在しない環境では不使用。


６、使用方法
　Sample/buildに移動し、以下のようにコマンド投入して下さい。
　　make            … テストを実行する。実行ファイルが存在しない場合は、ビルド後にテストを実行する。
　　make build      … ビルドのみ行い、テストは実行しない。
　　make clean      … テスト実行結果（xmlファイル）を削除する。
　　make allclean   … cleanに加え、実行ファイルやオブジェクトファイル、カバレッジ情報ファイルも削除する、


７、カバレッジの取り方
　GCCの機能を使ったカバレッジ取得にも対応しています。
　カバレッジ取得の有効/無効は選択可能になっており、デフォルト無効となっています。
　有効にする場合、config.mkの下記部分をONにして下さい。
　　　#------------------------------------------------#
　　　# Select use coverage ON/OFF.
　　　#------------------------------------------------#
　　　#USE_COVERAGE	= ON
　　　USE_COVERAGE	= OFF



