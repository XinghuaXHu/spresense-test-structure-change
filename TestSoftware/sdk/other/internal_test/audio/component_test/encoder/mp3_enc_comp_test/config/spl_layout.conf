###############################################################################
#
#      File Name: spl_layout.conf
#
#      Description: SpinLock layout configuration file (ruby script)
#
#      Notes: (C) Copyright 2012,2013,2015 Sony Corporation
#
#      Author: Satoru AIZAWA
#
###############################################################################

###############################################################################
# CPU-IDの定義
# "CPUID_"で始まる文字列で指定する
# ここで定義したものと同じ値を返すマクロGET_CPU_ID()をユーザーが実装する必要がある
#
CpuIds = [
	"CPUID_CORE0",	#0 
	"CPUID_CORE1",	#1 
	"CPUID_CORE2",	#2 
	"CPUID_CORE3",	#3 
	"CPUID_CORE4",	#4 
	"CPUID_CORE5",	#5 
	"CPUID_CORE6",	#6 
	"CPUID_CORE7",	#7 
	"CPUID_CORE8",	#8 
	"CPUID_CORE9",	#9 
	nil # end of user definition
] # end of CpuIds

# スピンロックのポリシークラス名称
# クラス定義は、"ポリシークラス名称.h"(例. "PetersonLock.h")に実装すること
PETERSON= "PetersonLock"	# 2CPU S/W spinlock
BAKERY	= "BakeryLock"		# N-CPU S/W spinlock

# ユーザー定義定数は、"U_"で始まる英大文字・数字の名称とすること
# "U_SPL_"で始まる名称で定義すると、spl_id.hにdefineマクロとしても出力される
U_SW_POLLING		= 3000		# Max S/W polling count

###############################################################################
# スピンロックプールの定義
#
#   ID:          スピンロックプールIDの名称を、"SPL_"で始まる文字列で指定。
#                以下は、予約済みのため使用禁止。
#                "SPL_NULL", "SPL_TOP", "SPL_END"
#
#   policy:      スピンロックに使用するポリシークラスの名称を指定する。
#
#   reg_addr:    レジスタのアドレス。ポリシーがPETERSONかBAKERYならば、0を指定する。
#
#   cpu_id:      CpuIdsで定義した値のいずれかを指定する。
#
#   self_id:     CPU毎に定義した識別子。SpinLockコンストラクタの引数となる。
#
#   max_polling: ロック獲得までの最大ポーリング回数。SpinLockコンストラクタの引数となる。
#
#   スピンロックを共有するCPU数分、cpu_id/self_id/max_pollingのセットを記述する。
#   先頭に記述されたCPUが、SpinLock<T>::initOnce()を実行する。
#
SpinLockPool = [
# [ ID			policy    reg-addr        [cpu_id self_id max_polling] ...]
#  ["SPL_ALL",		PETERSON, 0x00000000,     ["CPUID_SPU0", 0, U_SW_POLLING], ["CPUID_APU0", 1, U_SW_POLLING]],
  nil # end of user definition
] # end of SpinLockPool

if __FILE__ == $0
require "spl_layout.rb"
end
