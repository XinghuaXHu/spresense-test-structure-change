##############################################################################
#
#      File Name: mem_layout.conf
#
#      Description: Memory layout configuration file for Memory Manager Lite.
#
#      Notes: (C) Copyright 2014 Sony Corporation
#
#      Author: Satoru AIZAWA
#
##############################################################################

##############################################################################
# MemoryManager Configuration
#
UseFence            = true  # プールフェンスの使用有無 USE_MEMMGR_FENCE
UseDynamicPool      = false # 動的生成プールの使用有無 USE_MEMMGR_DYNAMIC_POOL
UseOver255Segments  = false # 255を超えるセグメント(最大65535)の使用有無 USE_MEMMGR_OVER255_SEGMENTS
UseCopiedPoolAttr   = false # 静的プール属性を作業領域にコピーして使用するか否か USE_MEMMGR_COPIED_POOL_ATTR

# 以下は未実装のため、false固定とする
UseMultiCore        = false # マルチコアサポート(共有プール)の使用有無 USE_MEMMGR_MULTI_CORE
UseSegDeleter       = false # セグメント解放時コールバックの使用有無 USE_MEMMGR_SEG_DELETER
UseSegThreshold     = false # セグメント数閾値コールバックの使用有無 USE_MEMMGR_SEG_THRESHOLD
UseRingBufPool      = false # RingBufプールの使用有無 USE_MEMMGR_RINGBUF_POOL
UseRingBufThreshold = false # バッファ量の閾値コールバックの使用有無 USE_MEMMGR_RINGBUF_THRESHOLD

require "mem_layout.rb"

##############################################################################
# User defined constants
# スクリプト内定義と重ならないように、"U_"で開始して英大文字、数字と"_"のみとする
# "U_MEM_"で始まる名称で定義すると、output_headerに同名のマクロが出力される
#
U_STD_ALIGN	= 8		# standard alignment
U_MSGQ_ALIGN	= 64		# message queue area alignment
U_TILE_ALIGN	= 0x20000	# Memory Tile Align 128KB
U_APU_WORK_AREA_SIZE		= 0x00020000

U_1ST_TILE_ALIGN = 0x0d100000
U_2ND_TILE_ALIGN = 0x0d120000
U_3RD_TILE_ALIGN = 0x0d140000
U_4TH_TILE_ALIGN = 0x0d160000

##############################################################################
# Dynamic pool constants
# output_headerに、NUM_DYN_POOLSマクロとして出力される
#
if UseDynamicPool
  NumDynamicPools      = 1  # 動的生成プールの予約数(1以上、255 - NUM_MEM_POOLS以下)
end

#######################################################################################
# Memory device definition
# output_headerに、name_ADDRマクロとname_SIZEマクロが出力される
#
# name: デバイス名(3文字以上。英大文字で始まり、英大文字, 数字, "_"が使用可能)
# ram : デバイスがRAMならば、true。それ以外ならばfalse
# addr: アドレス(4の倍数の値)
# size: バイト単位のサイズ(0を除く4の倍数の値)
#
MemoryDevices.init(
  # name         ram    addr        size
  # バッファや Apu の領域はリザーブ領域として貰っているので、そこだけ使用する
  ["AUD_SRAM",   true,  0x0d100000, 0x00080000], # replace before build
  ["RESERVED",   true,  0x0e000000, 0x00040000], # tantetive
  nil # end of definition
)

##############################################################################
# Fixed area definition
# output_headerに、name_ALIGN, name_ADDR, name_SIZEマクロが出力される
# フェンスが有効な場合は、name_L_FENCE, name_U_FENCEマクロも出力される
#
# name  : 領域名(英大文字で始まり、"_AREA"で終わる名称。英大文字, 数字, _が使用可能)
# device: 領域を確保するMemoryDevicesのデバイス名
# align : 領域の開始アライメント。0を除くMinAlign(=4)の倍数を指定する
# size  : 領域のサイズ。(0を除く4の倍数の値)
#         各デバイスの最終領域には、残りサイズを示すRemainderSizeを指定可能
# fence : フェンスの有効・無効を指定する(この項目は、UseFenceがfalseの場合は無視される)
#         deviceがRAMの場合のみ、フェンスを有効化することができる
#
FixedAreas.init(
  # name,                  device,     align,        size,         fence
  ["AUDIO_WORK_AREA",     "AUD_SRAM", U_TILE_ALIGN, 0x0007c000,   false], 
  ["MSG_QUE_AREA",        "AUD_SRAM", U_MSGQ_ALIGN, 0x00003000,   false], # DSP1 message queue area 
  ["MEMMGR_WORK_AREA",    "AUD_SRAM", U_STD_ALIGN,  0x0000013C,   false], # MemMgrLite WORK Area
  ["MEMMGR_DATA_AREA",    "AUD_SRAM", U_STD_ALIGN,  0x00000100,   false], # MemMgrLite DATA Area
  
  # 予約領域。アクセスするとBusErrorになるはず
  ["SPL_MGR_AREA",        "RESERVED",  U_STD_ALIGN,  0x00000040,   false], # SpinlockMgr area (not used)
  ["SPU_LOG_AREA",        "RESERVED",  U_STD_ALIGN,  0x00000040,   false], # Spu dump log (not used)
  ["APU_LOG_AREA",        "RESERVED",  U_STD_ALIGN,  0x00000040,   false], # Apu dump log (not used)

  nil # end of definition
)

##############################################################################
# Pool layout definition
# output_headerに、プールIDとNUM_MEM_POOLS, NUM_MEM_LAYOUTSおよび
# Lx_name_ALIGN, Lx_name_ADDR, Lx_name_SIZE, Lx_name_NUM_SEG, Lx_name_SEG_SIZE
# マクロが出力される(xはレイアウト番号)
# フェンスが有効な場合は、Lx_name_L_FENCE, Lx_name_U_FENCEマクロも出力される
#
# name : プール名(英大文字で始まり、"_POOL"で終わる名称。英大文字, 数字, _が使用可能)
# area : プール領域として使用するFixedAreaの領域名。領域はRAMに配置されていること
# type : プール種別。Basic, RingBuf(UseRingBufがtrueの場合に指定可能)のいずれか
# align: プールの開始アライメント。0を除くMinAlign(=4)の倍数を指定する
# size : プールのサイズ。0を除く4の倍数の値。Basicプールでは、セグメントサイズ * セグメント数
#        各areaの最終領域には、残りサイズを示すRemainderSizeを指定することができる
# seg  : セグメント数(1以上、255または65535以下)を指定する。UseOver255Segmentsを参照のこと
#        Basicプールの場合、size/seg が各セグメントのサイズとなる(剰余は無視される)
# fence    : フェンスの有効・無効を指定する。この項目は、UseFenceがfalseの場合は無視される
# spinlock : CPUコア間で共有する場合はスピンロック名を、非共有時は、""を指定する。
#            この項目は、UseMultiCoreがfalseの場合は無視される
#

#---------------------#
# Settings for Hi-res
#---------------------#
#U_ES_BUF_SIZE = 6144	# (1024sample * 2ch * 3 bytes) for 192kHz, 24bit Wav stream (= ES_BUFF_SIZE defined in player_obj.cpp)
#U_PCM_BUF_SIZE = 8192	# (1024sample * 2ch * 4 bytes) for 192kHz, 24bit Wav stream (= MAX_PCM_BUF_SIZE defined in player_obj.cpp)

#---------------------#
# Setting for normal mode
#---------------------#
U_ES_BUF_SIZE = 4096 # = ES_BUFF_SIZE defined in player_obj.cpp
U_PCM_BUF_SIZE = 8192	#(1024 * 48 / 24) * 2ch * 16bit (1024sample/frame@24kHz, 2ch, 16bit) (= MAX_PCM_BUF_SIZE defined in player_obj.cpp)
U_ES_BUF_SEG_NUM = 2
U_ES_BUF_POOL_SIZE = U_ES_BUF_SIZE * U_ES_BUF_SEG_NUM

U_PCM_BUF_SEG_NUM = 5  #StopコマンドによるFlush押出し考慮して+1
U_PCM_BUF_POOL_SIZE = U_PCM_BUF_SIZE * U_PCM_BUF_SEG_NUM

U_MIC_IN_BUF_SIZE = 480
U_MIC_IN_BUF_SEG_NUM = 4
U_MIC_IN_BUF_POOL_SIZE = U_MIC_IN_BUF_SIZE * U_MIC_IN_BUF_SEG_NUM

U_I2S_IN_BUF_SIZE = 960
U_I2S_IN_BUF_SEG_NUM = 4
U_I2S_IN_BUF_POOL_SIZE = U_I2S_IN_BUF_SIZE * U_I2S_IN_BUF_SEG_NUM

U_HP_OUT_BUF_SIZE = 960
U_HP_OUT_BUF_SEG_NUM = 4
U_HP_OUT_BUF_POOL_SIZE = U_HP_OUT_BUF_SIZE * U_HP_OUT_BUF_SEG_NUM

U_I2S_OUT_BUF_SIZE = 960
U_I2S_OUT_BUF_SEG_NUM = 4
U_I2S_OUT_BUF_POOL_SIZE = U_I2S_OUT_BUF_SIZE * U_I2S_OUT_BUF_SEG_NUM

U_DMA_CH_SWAP_BUF_SIZE = 960
U_DMA_CH_SWAP_BUF_SEG_NUM = 6
U_DMA_CH_SWAP_BUF_POOL_SIZE = U_DMA_CH_SWAP_BUF_SIZE * U_DMA_CH_SWAP_BUF_SEG_NUM

U_APU_CMD_SIZE = 84
U_DEC_APU_CMD_SEG_NUM = 3
U_DEC_APU_CMD_POOL_SIZE = U_APU_CMD_SIZE * U_DEC_APU_CMD_SEG_NUM
U_ENC_APU_CMD_SEG_NUM = 3
U_ENC_APU_CMD_POOL_SIZE = U_APU_CMD_SIZE * U_ENC_APU_CMD_SEG_NUM
U_SRC_APU_CMD_SEG_NUM = 3
U_SRC_APU_CMD_POOL_SIZE = U_APU_CMD_SIZE * U_SRC_APU_CMD_SEG_NUM

U_L1_APU_TEXT_SIZE = 0x00020000 + 0x00017200
U_L1_APU_WORK_AREA_POOL = 8

PoolAreas.init(
  [ # layout 0 for Player
    #[ name,                 area,	       type,  align,      pool-size,  seg,fence, spinlock]
    ["APU0_TEXT_DATA_POOL",   "AUDIO_WORK_AREA", Basic, U_TILE_ALIGN, 0x00035000,	1,	false,  ""],
    ["APU0_STACK_POOL",       "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00001000,	1,	false,  ""],
    ["APU0_HEAP_POOL",        "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00001000,	1,	false,  ""],
    ["APU_WORK_AREA_POOL",    "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00000008,	1,	false, ""],
    # MemHandle Mapping to Last Tile
    ["PLAYER_OBJ_POOL",       "AUDIO_WORK_AREA", Basic, U_4TH_TILE_ALIGN + 4,  0x00000920,	1,	true,  ""],
    ["OUTPUT_MIX_OBJ_POOL",   "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00000130,	1,	true,  ""],
    ["ES_BUF_POOL",	      "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_ES_BUF_POOL_SIZE, U_ES_BUF_SEG_NUM,true,  ""],
    ["PCM_BUF_POOL",	      "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_PCM_BUF_POOL_SIZE, U_PCM_BUF_SEG_NUM,true,  ""],
    ["DEC_APU_CMD_POOL",      "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE, U_DEC_APU_CMD_SEG_NUM,      true,  ""],
    nil # end of each layout
  ], # end of layout 0
  
  [ # layout 1 for Recorder
   #[ name,              area,            type,  align,       pool-size,       seg,            fence, spinlock]
    ["APU0_TEXT_DATA_POOL",   "AUDIO_WORK_AREA", Basic, U_TILE_ALIGN, U_L1_APU_TEXT_SIZE,	1,	false,  ""],
    ["APU0_STACK_POOL",       "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00002000,	1,	false,  ""],
    ["APU0_HEAP_POOL",        "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00008000,	1,	false,  ""],
    ["APU_WORK_AREA_POOL",    "AUDIO_WORK_AREA", Basic, U_STD_ALIGN, U_L1_APU_WORK_AREA_POOL,1, false, ""],
    ["OUTPUT_BUF_POOL",       "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  6144*18,       18,      true,   ""], # 768*2byte(16bits)*4ch*3面
    ["MIC_IN_BUF_POOL",       "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00001B00*5, 5,      true,   ""], #1728*2byte(16bits)*2ch*5面
    ["DMA_CH_SWAP_BUF_POOL",  "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00001B00*5, 5,      true,   ""], #1728*2byte(16bits)*2ch*5面
    ["ENC_APU_CMD_POOL",      "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_ENC_APU_CMD_POOL_SIZE, U_ENC_APU_CMD_SEG_NUM,      true,   ""],
    ["SRC_APU_CMD_POOL",      "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_SRC_APU_CMD_POOL_SIZE, U_SRC_APU_CMD_SEG_NUM,      true,   ""],
    nil # end of each layout
  ], # end of layout 1
  
  [ # layout 2 for Voice Trigger
   #[ name,                   area,             type,  align,        pool-size,  seg,   fence,  spinlock]
    ["APU2_TEXT_DATA_POOL",  "AUDIO_WORK_AREA", Basic, U_TILE_ALIGN, 0x0002D000,     1,	false,  ""],
    ["APU2_HEAP_POOL",       "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00001000,     1,	false,  ""],
    ["APU2_STACK_POOL",      "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00002000,     1,	false,  ""],
    # MemHandle Mapping to Last Tile
    ["WUWSR_IN_BUF_POOL",    "AUDIO_WORK_AREA", Basic, U_4TH_TILE_ALIGN + 4,  0x00000280*30, 30, true,   ""], #320*2byte(16bits)*30面=0x4B00
    nil # end of each layout
  ], # end of layout 2
  
  [ # layout 3 for SoundEffet
    #[ name,              area,		     type,  align,		pool-size,    	  seg,  fence, spinlock]
    ["APU0_TEXT_POOL",       "AUDIO_WORK_AREA", Basic, U_TILE_ALIGN, 0x0000d000,	1,	false,  ""],
    ["APU0_DATA_POOL",       "AUDIO_WORK_AREA", Basic,           16, 0x0002a000,	1,	false,  ""], # リンカで16byte align 取っているため
    ["APU0_HEAP_POOL",       "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00001000,	1,	true,  ""],
    ["APU0_STACK_POOL",      "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00001000, 	1,	true,  ""],
    ["APU1_TEXT_DATA_POOL",  "AUDIO_WORK_AREA", Basic, U_TILE_ALIGN, 0x00010000,	1,	true,  ""],
    ["APU1_STACK_POOL",      "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00003000,	1,	true,  ""],
    ["APU1_HEAP_POOL",       "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00007000,	1,	true,  ""],
    ["MIC_IN_BUF_POOL", "AUDIO_WORK_AREA", Basic, U_STD_ALIGN, U_MIC_IN_BUF_POOL_SIZE,U_MIC_IN_BUF_SEG_NUM, true, ""],
    ["I2S_IN_BUF_POOL", "AUDIO_WORK_AREA", Basic, U_STD_ALIGN, U_I2S_IN_BUF_POOL_SIZE,U_I2S_IN_BUF_SEG_NUM, true, ""],
    ["HP_OUT_BUF_POOL", "AUDIO_WORK_AREA", Basic, U_STD_ALIGN, U_HP_OUT_BUF_POOL_SIZE,U_HP_OUT_BUF_SEG_NUM, true, ""],
    ["I2S_OUT_BUF_POOL", "AUDIO_WORK_AREA", Basic, U_STD_ALIGN, U_I2S_OUT_BUF_POOL_SIZE,U_I2S_OUT_BUF_SEG_NUM, true, ""],
    ["DMA_CH_SWAP_BUF_POOL", "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_DMA_CH_SWAP_BUF_POOL_SIZE, U_DMA_CH_SWAP_BUF_SEG_NUM,      true,   ""],
    ["MFE_BUF_POOL",         "AUDIO_WORK_AREA", Basic, 0x0d17a000,   0x00001000,   1,      false,  ""], 
    ["XLOUD_BUF_POOL",       "AUDIO_WORK_AREA", Basic, 0x0d17b000,   0x00001000,   1,      false,  ""],
    nil # end of each layout
  ], # end of layout 3

  [ # layout 4 for Voice Command
   #[ name,               area,		     type,  align,       pool-size,    		   seg,           	fence, spinlock]
   ["APU0_TEXT_POOL",		 "AUDIO_WORK_AREA", Basic, U_TILE_ALIGN, 0x0000c000,		1,	false,  ""],
   ["APU0_DATA_POOL",		 "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x0002b000,		1,	false,  ""],
   ["APU0_STACK_POOL",		 "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00001000,		1,	true,  ""],
   ["APU0_HEAP_POOL",		 "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  0x00001000,		1,	true,  ""],
    nil # end of each layout
  ], # end of layout 4

  nil # end of definition
)

# generate header files
generate_files
